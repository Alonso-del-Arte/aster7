' ASTEROID FIELD NAVIGATION GAME
' * IN PROCESS OF REVISION *

' Up        DIR = 8    INKEY$ = CHR$(0) + "H"
' Left      DIR = 4    INKEY$ = CHR$(0) + "K"
' Right     DIR = 6    INKEY$ = CHR$(0) + "M"
' Down      DIR = 2    INKEY$ = CHR$(0) + "P"

COMMON SHARED DIR
COMMON SHARED NEWPOSX
COMMON SHARED NEWPOSY
COMMON SHARED OLDPOSX
COMMON SHARED OLDPOSY
COMMON SHARED SCORE&

CONST FIRE = 2
CONST INACTIVE = 0
CONST PROGRESS = 1
CONST QMDIND = 0
CONST QMX = 1
CONST QMY = 2
CONST QMDIR = 3

DECLARE SUB CATALOGDEBRIS (POSX, POSY)
DECLARE FUNCTION CRASH (POSX, POSY)
DECLARE SUB CREATEFIELD (INDEX)
DECLARE SUB DISPLAYHALLFAME ()
DECLARE SUB DRAWENEMYSHIPUP (SX, SY)
DECLARE SUB DRAWENEMYSHIPDOWN (SX, SY)
DECLARE SUB DRAWENEMYSHIPLEFT (SX, SY)
DECLARE SUB DRAWENEMYSHIPRIGHT (SX, SY)
DECLARE SUB DRAWSHIPUP (SX, SY)
DECLARE SUB DRAWSHIPDOWN (SX, SY)
DECLARE SUB DRAWSHIPLEFT (SX, SY)
DECLARE SUB DRAWSHIPRIGHT (SX, SY)
DECLARE SUB DRAWTORPEDO (SX, SY)
DECLARE SUB ERASESHIP (POSX, POSY)
DECLARE SUB EXPLODE (POSX, POSY)
DECLARE SUB EXPLODESOUNDEFFECT ()
DECLARE SUB INITENEMYSHIPS ()
DECLARE SUB MOVENEMYSHIPDIR (ENUMBER)
DECLARE SUB MOVSHIPDIR ()
DECLARE FUNCTION NAVFIELD ()
DECLARE FUNCTION NEEDCHGDIR (POSX, POSY, PDIR)
DECLARE FUNCTION NEEDFIRE (POSX, POSY)
DECLARE SUB PLACEHALLFAME (LEVELACHVD, SCOREACHVD&)
DECLARE SUB REGULATEDEBRIS ()
DECLARE FUNCTION QUERYYN$ (Q$)
DECLARE SUB UPDATEENEMYSHIPS ()
DECLARE SUB UPDATETORPEDOES ()

TYPE HALLFAMEREC
  PNAME AS STRING * 20
  LASTLEVELATT AS INTEGER
  SCOREATT AS LONG
END TYPE

DIM SHARED ARRAYDEBRIS(0 TO 2, 0 TO 24)
DIM SHARED ENEMYDIR(1 TO 4)
DIM SHARED ENEMYEXIST(1 TO 4)
DIM SHARED ENEMYNEWPOSX(1 TO 4)
DIM SHARED ENEMYNEWPOSY(1 TO 4)
DIM SHARED ENEMYOLDPOSX(1 TO 4)
DIM SHARED ENEMYOLDPOSY(1 TO 4)
DIM SHARED HALLFAME(1 TO 20) AS HALLFAMEREC
DIM SHARED INDICTORPEDO(0 TO 4)
DIM TESTREC AS HALLFAMEREC
DIM SHARED TORPEDOSTATUS(1 TO 3, 0 TO 4)

' INITIAL HALL OF FAME
DATA "LT CMDR CHICKEN, USN", 20, 100000
DATA "JANET SMITH         ", 19, 50000
DATA "CARLOS GONZALEZ     ", 18, 25000
DATA "UNIT A-6708-III     ", 17, 12500
DATA "KARL WYZWIESKI, M.D.", 16, 6250
DATA "UNIT A-6708-II      ", 15, 3125
DATA "MARIA LOPEZ         ", 14, 1570
DATA "JOHN DOE SR         ", 13, 790
DATA "JOHN DOE JR         ", 12, 400
DATA "JOHN DOE III        ", 11, 200
DATA "THE DEVIL           ", 10, 190
DATA "THE CLOWN           ", 9, 180
DATA "THE BUBBLE          ", 8, 170
DATA "THE STAR            ", 7, 160
DATA "AL GORE             ", 6, 150
DATA "BILL CLINTON        ", 5, 140
DATA "NANCY KERRIGAN      ", 4, 130
DATA "TONYA HARDING       ", 3, -100
DATA "UNIT A-6708-I       ", 2, -110
DATA "UNIT A-6708         ", 1, -120

CLS
SCREEN 12                               ' VGA graphics, 640 x 480 mode
PRINT "Initializing..."
OPEN "HALLFAME.DAT" FOR RANDOM AS #1 LEN = 26
GET #1, 1, TESTREC
TEST = ASC(LEFT$(TESTREC.PNAME, 1))
IF TEST = 0 THEN GOTO Fromscratch:
GOTO Existing:
Fromscratch:
FOR INITHFRECS = 1 TO 20
  READ HALLFAME(INITHFRECS).PNAME
  READ HALLFAME(INITHFRECS).LASTLEVELATT
  READ HALLFAME(INITHFRECS).SCOREATT
NEXT INITHFRECS
FOR FILEHFRECS = 1 TO 20
  PUT #1, FILEHFRECS, HALLFAME
NEXT FILEHFRECS
CLOSE #1
GOTO Mergeback:
Existing:
OPEN "HALLFAME.DAT" FOR RANDOM AS #1 LEN = 26
FOR ENTERHFRECS = 1 TO 20
  GET #1, ENTERHFRECS, HALLFAME
NEXT ENTERHFRECS
CLOSE #1
Mergeback:
DISPLAYHALLFAME
KEEPGOING = 1
FOR DEACTIVATE = 0 TO 4
  INDICTORPEDO(DEACTIVATE) = INACTIVE   ' Initialize torpedo array
NEXT DEACTIVATE
FOR CLEARDEBRIS = 0 TO 24
  ARRAYDEBRIS(QMDIND, CLEARDEBRIS) = 0  ' Initialize debris array
NEXT CLEARDEBRIS
DO WHILE KEEPGOING = 1
  SCORE& = 0                            ' Initialize score
  DENSLEVEL = 1                         ' Starting density level
  INDICDEAD = 0                         ' Dead or alive indicator
  DO WHILE INDICDEAD = 0
    CLS
    LOCATE 24, 2
    PRINT DENSLEVEL
    CREATEFIELD (DENSLEVEL)
    INITENEMYSHIPS
    INDICDEAD = NAVFIELD
    DENSLEVEL = DENSLEVEL + 1           ' Field gets thicker
    SCORE& = SCORE& + 500               ' Level completion bonus
  LOOP
  CALL EXPLODE(NEWPOSX, NEWPOSY)
  SCORE = SCORE& - 500                  ' No level completion bonus for
                                        ' level where ship goes kablooiee
  IF SCORE > HALLFAME(20).SCOREATT THEN CALL PLACEHALLFAME(DENSLEVEL, SCORE&)
  LINE (270, 100)-(400, 200), 2, BF
  LOCATE 10, 34
  PRINT " "
  ANSWER$ = QUERYYN$("PLAY AGAIN? ")
  IF ANSWER$ = "N" THEN KEEPGOING = 0
LOOP

END

SUB CATALOGDEBRIS (POSX, POSY)

STATIC SUBSCRIPT AS INTEGER

X = POSX
Y = POSY
IF (SUBSCRIPT < 0) OR (SUBSCRIPT > 24) THEN SUBSCRIPT = 0
ARRAYDEBRIS(QMDIND, SUBSCRIPT) = 1
ARRAYDEBRIS(QMX, SUBSCRIPT) = X
ARRAYDEBRIS(QMY, SUBSCRIPT) = Y
SUBSCRIPT = SUBSCRIPT + 1

END SUB

FUNCTION CRASH (POSX, POSY)

IF (POSX < 1) OR (POSY < 1) THEN        ' Too far up or left
  CRASH = 1
ELSE                                    ' Too far down or right
  IF (POSX > 639) OR (POSY > 469) THEN
    CRASH = 1
  ELSE
    FLAG = 0                            ' Initialize collision flag
    SCAN = 0                            ' Initialize scan counter
    DO WHILE (FLAG = 0) AND (SCAN <= 9) ' Scan around ship
      TEST1 = POINT(POSX + SCAN, POSY - 1)
      TEST2 = POINT(POSX + SCAN, POSY + 10)
      TEST3 = POINT(POSX - 1, POSY + SCAN)
      TEST4 = POINT(POSX + 10, POSY + SCAN)
      IF (TEST1 <> 0) OR (TEST2 <> 0) THEN FLAG = 1
      IF (TEST3 <> 0) OR (TEST4 <> 0) THEN FLAG = 1
      SCAN = SCAN + 1                   ' Go to next positions
    LOOP
    IF FLAG = 1 THEN
      CRASH = 1                         ' Vessel has crashed
    ELSE
      CRASH = 0                         ' Vessel is safe
    END IF
  END IF
END IF

END FUNCTION

SUB CREATEFIELD (INDEX)

ASTEROIDNUM = INDEX * 10
FOR MAKEASTEROID = 1 TO ASTEROIDNUM
  X = INT(RND * 530) + 50
  Y = INT(RND * 469)
  FOR XPOS = X TO X + 9
    FOR YPOS = Y TO Y + 9
      DECISION = INT(RND * 3)
      IF DECISION = 1 THEN
        CLR% = INT(RND * 15)
        IF CLR% > 13 THEN CLR% = 0
        PSET (XPOS, YPOS), CLR%
      END IF
    NEXT YPOS
  NEXT XPOS
NEXT MAKEASTEROID

END SUB

SUB DISPLAYHALLFAME

LOCATE 3, 2
PRINT "ASTEROID FIELD NAVIGATION GAME"
PRINT "          BEST SCORES"
PRINT " "
FOR DISP = 1 TO 20
  PRINT USING "##"; DISP;
  PRINT " "; HALLFAME(DISP).PNAME; " ";
  PRINT USING "##"; HALLFAME(DISP).LASTLEVELATT;
  PRINT " ";
  PRINT USING "##########"; HALLFAME(DISP).SCOREATT
NEXT DISP
DO
  LOCATE 1, 1
  PRINT "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
  LOCATE 27, 1
  PRINT "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
  LOCATE 1, 1
  PRINT " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
  LOCATE 27, 1
  PRINT " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
LOOP WHILE INKEY$ = ""

END SUB

SUB DRAWENEMYSHIPDOWN (SX, SY)

LINE (SX, SY)-(SX, SY + 5), 2       ' Draw cyan fins
LINE (SX + 9, SY)-(SX + 9, SY + 5), 2
LINE (SX + 1, SY)-(SX + 1, SY + 6), 2
LINE (SX + 8, SY)-(SX + 8, SY + 6), 2
LINE (SX + 2, SY)-(SX + 2, SY + 7), 15    ' Draw white body
LINE (SX + 7, SY)-(SX + 7, SY + 7), 15
LINE (SX + 3, SY)-(SX + 3, SY + 8), 15
LINE (SX + 6, SY)-(SX + 6, SY + 8), 15
LINE (SX + 4, SY)-(SX + 4, SY + 9), 15
LINE (SX + 5, SY)-(SX + 5, SY + 9), 15

END SUB

SUB DRAWENEMYSHIPLEFT (SX, SY)

LINE (SX + 4, SY)-(SX + 9, SY), 2      ' Draw cyan fins
LINE (SX + 4, SY + 9)-(SX + 9, SY + 9), 2
LINE (SX + 3, SY + 1)-(SX + 9, SY + 1), 2
LINE (SX + 3, SY + 8)-(SX + 9, SY + 8), 2
LINE (SX + 2, SY + 2)-(SX + 9, SY + 2), 15   ' Draw white body
LINE (SX + 2, SY + 7)-(SX + 9, SY + 7), 15
LINE (SX + 1, SY + 3)-(SX + 9, SY + 3), 15
LINE (SX + 1, SY + 6)-(SX + 9, SY + 6), 15
LINE (SX, SY + 4)-(SX + 9, SY + 4), 15
LINE (SX, SY + 5)-(SX + 9, SY + 5), 15

END SUB

SUB DRAWENEMYSHIPRIGHT (SX, SY)

LINE (SX, SY)-(SX + 5, SY), 2          ' Draw cyan fins
LINE (SX, SY + 9)-(SX + 5, SY + 9), 2
LINE (SX, SY + 1)-(SX + 6, SY + 1), 2
LINE (SX, SY + 8)-(SX + 6, SY + 8), 2
LINE (SX, SY + 2)-(SX + 7, SY + 2), 15       ' Draw white body
LINE (SX, SY + 7)-(SX + 7, SY + 7), 15
LINE (SX, SY + 3)-(SX + 8, SY + 3), 15
LINE (SX, SY + 6)-(SX + 8, SY + 6), 15
LINE (SX, SY + 4)-(SX + 9, SY + 4), 15
LINE (SX, SY + 5)-(SX + 9, SY + 5), 15

END SUB

SUB DRAWENEMYSHIPUP (SX, SY)

LINE (SX, SY + 4)-(SX, SY + 9), 2          ' Draw cyan fins
LINE (SX + 9, SY + 4)-(SX + 9, SY + 9), 2
LINE (SX + 1, SY + 3)-(SX + 1, SY + 9), 2
LINE (SX + 8, SY + 3)-(SX + 8, SY + 9), 2
LINE (SX + 2, SY + 2)-(SX + 2, SY + 9), 15      ' Draw white body
LINE (SX + 7, SY + 2)-(SX + 2, SY + 9), 15
LINE (SX + 3, SY + 1)-(SX + 3, SY + 9), 15
LINE (SX + 6, SY + 1)-(SX + 6, SY + 9), 15
LINE (SX + 4, SY)-(SX + 4, SY + 9), 15
LINE (SX + 5, SY)-(SX + 5, SY + 9), 15

END SUB

SUB DRAWSHIPDOWN (SX, SY)

LINE (SX, SY)-(SX, SY + 5), 4       ' Draw red fins
LINE (SX + 9, SY)-(SX + 9, SY + 5), 4
LINE (SX + 1, SY)-(SX + 1, SY + 6), 4
LINE (SX + 8, SY)-(SX + 8, SY + 6), 4
LINE (SX + 2, SY)-(SX + 2, SY + 7), 15    ' Draw white body
LINE (SX + 7, SY)-(SX + 7, SY + 7), 15
LINE (SX + 3, SY)-(SX + 3, SY + 8), 15
LINE (SX + 6, SY)-(SX + 6, SY + 8), 15
LINE (SX + 4, SY)-(SX + 4, SY + 9), 15
LINE (SX + 5, SY)-(SX + 5, SY + 9), 15

END SUB

SUB DRAWSHIPLEFT (SX, SY)

LINE (SX + 4, SY)-(SX + 9, SY), 4      ' Draw red fins
LINE (SX + 4, SY + 9)-(SX + 9, SY + 9), 4
LINE (SX + 3, SY + 1)-(SX + 9, SY + 1), 4
LINE (SX + 3, SY + 8)-(SX + 9, SY + 8), 4
LINE (SX + 2, SY + 2)-(SX + 9, SY + 2), 15   ' Draw white body
LINE (SX + 2, SY + 7)-(SX + 9, SY + 7), 15
LINE (SX + 1, SY + 3)-(SX + 9, SY + 3), 15
LINE (SX + 1, SY + 6)-(SX + 9, SY + 6), 15
LINE (SX, SY + 4)-(SX + 9, SY + 4), 15
LINE (SX, SY + 5)-(SX + 9, SY + 5), 15

END SUB

SUB DRAWSHIPRIGHT (SX, SY)

LINE (SX, SY)-(SX + 5, SY), 4          ' Draw red fins
LINE (SX, SY + 9)-(SX + 5, SY + 9), 4
LINE (SX, SY + 1)-(SX + 6, SY + 1), 4
LINE (SX, SY + 8)-(SX + 6, SY + 8), 4
LINE (SX, SY + 2)-(SX + 7, SY + 2), 15       ' Draw white body
LINE (SX, SY + 7)-(SX + 7, SY + 7), 15
LINE (SX, SY + 3)-(SX + 8, SY + 3), 15
LINE (SX, SY + 6)-(SX + 8, SY + 6), 15
LINE (SX, SY + 4)-(SX + 9, SY + 4), 15
LINE (SX, SY + 5)-(SX + 9, SY + 5), 15

END SUB

SUB DRAWSHIPUP (SX, SY)

LINE (SX, SY + 4)-(SX, SY + 9), 4          ' Draw red fins
LINE (SX + 9, SY + 4)-(SX + 9, SY + 9), 4
LINE (SX + 1, SY + 3)-(SX + 1, SY + 9), 4
LINE (SX + 8, SY + 3)-(SX + 8, SY + 9), 4
LINE (SX + 2, SY + 2)-(SX + 2, SY + 9), 15      ' Draw white body
LINE (SX + 7, SY + 2)-(SX + 2, SY + 9), 15
LINE (SX + 3, SY + 1)-(SX + 3, SY + 9), 15
LINE (SX + 6, SY + 1)-(SX + 6, SY + 9), 15
LINE (SX + 4, SY)-(SX + 4, SY + 9), 15
LINE (SX + 5, SY)-(SX + 5, SY + 9), 15

END SUB

SUB DRAWTORPEDO (SX, SY)

FOR HTWINKLE = SX + 4 TO SX + 7
  FOR VTWINKLE = SY + 4 TO SY + 7
    CLR% = INT(RND * 3) + 13
    PSET (HTWINKLE, VTWINKLE), CLR%
  NEXT VTWINKLE
NEXT HTWINKLE

END SUB

SUB ERASESHIP (POSX, POSY)

' Damion's  Modification
LINE (POSX, POSY)-(POSX + 10, POSY + 10), 0, BF

END SUB

SUB EXPLODE (POSX, POSY)

X = POSX
Y = POSY
FOR XPOS = X TO X + 9
  FOR YPOS = Y TO Y + 9
    DECISION = INT(RND * 5)
    IF DECISION = 1 THEN
      CLR% = INT(RND * 2) + 14
      PSET (XPOS, YPOS), CLR%
    ELSE
      PSET (XPOS, YPOS), 0
    END IF
  NEXT YPOS
NEXT XPOS
' EXPLODESOUNDEFFECT
CALL CATALOGDEBRIS(X, Y)

END SUB

SUB EXPLODESOUNDEFFECT

FOR HITFREQS = 1 TO 20
  FREQ = INT(RND * 110) + 37
  DUR = INT(RND * 5)
  SOUND FREQ, DUR
NEXT HITFREQS

END SUB

SUB INITENEMYSHIPS

FOR INITEDIR = 1 TO 4
  ENEMYDIR(INITEDIR) = 4               'Default direction is to the left
NEXT INITEDIR
FOR INITEXPOS = 1 TO 4
  ENEMYOLDPOSX(INITEXPOS) = 618
  ENEMYNEWPOSX(INITEXPOS) = 618
NEXT INITEXPOS
ENEMYOLDPOSY(1) = 160
ENEMYNEWPOSY(1) = 160
ENEMYOLDPOSY(2) = 220
ENEMYNEWPOSY(2) = 220
ENEMYOLDPOSY(3) = 260
ENEMYNEWPOSY(3) = 260
ENEMYOLDPOSY(4) = 320
ENEMYNEWPOSY(4) = 320
FOR INITERISK = 1 TO 4
  ENEMYEXIST(INITERISK) = 1
NEXT INITERISK

END SUB

SUB MOVENEMYSHIPDIR (ENUMBER)

TX = ENEMYNEWPOSX(ENUMBER)
TY = ENEMYNEWPOSY(ENUMBER)
DIRECTION = ENEMYDIR(ENUMBER)
SELECT CASE DIRECTION
  CASE 8
    CALL DRAWENEMYSHIPUP(TX, TY)
  CASE 4
    CALL DRAWENEMYSHIPLEFT(TX, TY)
  CASE 6
    CALL DRAWENEMYSHIPRIGHT(TX, TY)
  CASE 2
    CALL DRAWENEMYSHIPDOWN(TX, TY)
END SELECT

END SUB

SUB MOVSHIPDIR

TX = NEWPOSX
TY = NEWPOSY
SELECT CASE DIR
  CASE 8
    CALL DRAWSHIPUP(TX, TY)
  CASE 4
    CALL DRAWSHIPLEFT(TX, TY)
  CASE 6
    CALL DRAWSHIPRIGHT(TX, TY)
  CASE 2
    CALL DRAWSHIPDOWN(TX, TY)
END SELECT

END SUB

FUNCTION NAVFIELD

DIR = 6                 ' Default direction is to the right
OLDPOSX = 2             ' Beginning position
OLDPOSY = 240
NEWPOSX = 2
NEWPOSY = 240
RISK = 0
OUTFIELD = 0
CHANGEDIR = 0
REGULATE = 0                ' Used to regulate
DO WHILE (RISK = 0) AND (OUTFIELD = 0)
  I$ = INKEY$
  SELECT CASE I$
    CASE CHR$(0) + "H"                  ' Up
      DIR = 8
      CHANGEDIR = 1
    CASE CHR$(0) + "K"                  ' Left
      DIR = 4
      CHANGEDIR = 1
    CASE CHR$(0) + "M"                  ' Right
      DIR = 6
      CHANGEDIR = 1
    CASE CHR$(0) + "P"                  ' Down
      DIR = 2
      CHANGEDIR = 1
    CASE "P"
      LOCATE 2, 2
      PRINT "PAUSED..."
      DO WHILE INKEY$ = ""
      LOOP
      LOCATE 2, 2
      PRINT "         "
    CASE "T"
      IF INDICTORPEDO(0) = INACTIVE THEN
        INDICTORPEDO(0) = FIRE              ' Fire torpedo
        TORPEDOSTATUS(QMDIR, 0) = DIR
      END IF
  END SELECT
  IF CHANGEDIR = 1 THEN
    SCORE& = SCORE& - 100
    CHANGEDIR = 0                       ' Reset change direction flag
  ELSE
    SCORE& = SCORE& + 1
  END IF
  REGULATE = REGULATE + 1
  IF REGULATE = 1 OR REGULATE = 2 THEN
    SELECT CASE DIR
      CASE 8                            ' Up
        NEWPOSY = OLDPOSY - 1
      CASE 4                            ' Left
        NEWPOSX = OLDPOSX - 1
      CASE 6                            ' Right
        NEWPOSX = OLDPOSX + 1
      CASE 2                            ' Down
        NEWPOSY = OLDPOSY + 1
    END SELECT
    IF NEWPOSX > 590 THEN OUTFIELD = 1    ' Vessel has cleared field
    CALL ERASESHIP(OLDPOSX, OLDPOSY)
    MOVSHIPDIR
    OLDPOSX = NEWPOSX
    OLDPOSY = NEWPOSY
    RISK = CRASH(NEWPOSX, NEWPOSY)
    LOCATE 25, 2
    PRINT NEWPOSX; NEWPOSY
    LOCATE 26, 7
    PRINT SCORE&
  END IF
  IF REGULATE = 3 THEN UPDATEENEMYSHIPS ' Take care of enemy ships
  IF REGULATE = 4 THEN                  ' and debris on a
    REGULATEDEBRIS                      ' cyclical basis
    REGULATE = 0
  END IF
  UPDATETORPEDOES
LOOP
NAVFIELD = RISK

END FUNCTION

FUNCTION NEEDCHGDIR (POSX, POSY, PDIR)

X = POSX
Y = POSY
DIREC = PDIR
SELECT CASE DIREC                       ' Project future positions
  CASE 8
    Y = Y - 30
  CASE 4
    X = X - 30
  CASE 6
    X = X + 30
  CASE 2
    Y = Y + 30
END SELECT
NEEDCHGDIR = CRASH(X, Y)                ' Forecast risk of future position

END FUNCTION

FUNCTION NEEDFIRE (POSX, POSY)

X = POSX
Y = POSY
TPROTX = NEWPOSX \ 10
TPROTY = NEWPOSY \ 10
TANTGX = X \ 10
TANTGY = Y \ 10
IF (TPROTX = TANTGX) OR (TPROTY = TANTGY) THEN
  NEEDFIRE = 1                          ' Vessel in firing range
ELSE
  NEEDFIRE = 0                          ' Vessel not in firing range
END IF

END FUNCTION

SUB PLACEHALLFAME (LEVELACHVD, SCOREACHVD&)

LEV = LEVELACHVD
SKOR& = SCOREACHVD&
PLACER = 20
TRANSF = 20
FOUND = 0
LOCATE 8, 2
PRINT "Congratulations!  You have achieved"
PRINT " one of the highest scores!"
PRINT " Please enter your name:"
INPUT " ", PLAYERNAME$
IF LEN(PLAYERNAME$) > 20 THEN
  PLAYERNAME$ = LEFT$(PLAYERNAME$, 20)
ELSE
  IF LEN(PLAYERNAME$) < 20 THEN
    DO WHILE LEN(PLAYERNAME$) < 20
      PLAYERNAME$ = PLAYERNAME$ + " "   ' Pad with spaces
    LOOP
  END IF
END IF
DO WHILE (PLACER > 1) AND (FOUND = 0)
  IF SKOR& < HALLFAME(PLACER - 1).SCOREATT THEN FOUND = 1
  IF FOUND = 0 THEN PLACER = PLACER - 1
LOOP
IF PLACER < 20 THEN
  DO WHILE TRANSF > PLACER
    HALLFAME(TRANSF).PNAME = HALLFAME(TRANSF - 1).PNAME
    HALLFAME(TRANSF).LASTLEVELATT = HALLFAME(TRANSF - 1).LASTLEVELATT
    HALLFAME(TRANSF).SCOREATT = HALLFAME(TRANSF - 1).SCOREATT
    TRANSF = TRANSF - 1
  LOOP
END IF
HALLFAME(PLACER).PNAME = PLAYERNAME$
HALLFAME(PLACER).LASTLEVELATT = LEV
HALLFAME(PLACER).SCOREATT = SKOR&
OPEN "HALLFAME.DAT" FOR RANDOM AS #1 LEN = 26
FOR FILEHFRECS = 1 TO 20
  PUT #1, FILEHFRECS, HALLFAME
NEXT FILEHFRECS
CLOSE #1
DISPLAYHALLFAME

END SUB

FUNCTION QUERYYN$ (Q$)

ANS$ = "*"
DO WHILE (ANS$ <> "Y") AND (ANS$ <> "N")
  PRINT "                                   "; Q$
  INPUT "                                    ", ANS$
  ANS$ = UCASE$(LEFT$(ANS$, 1))
LOOP
QUERYYN$ = ANS$

END FUNCTION

SUB REGULATEDEBRIS

FOR CYCLIC = 0 TO 24
  IF ARRAYDEBRIS(QMDIND, CYCLIC) = 1 THEN
    CALL ERASESHIP(ARRAYDEBRIS(QMX, CYCLIC), ARRAYDEBRIS(QMY, CYCLIC))
    ARRAYDEBRIS(QMDIND, CYCLIC) = 0
  END IF
NEXT CYCLIC

END SUB

SUB UPDATEENEMYSHIPS

FOR ENUM = 1 TO 4
  IF ENEMYEXIST(ENUM) = 1 THEN
    RISK = CRASH(ENEMYNEWPOSX(ENUM), ENEMYNEWPOSY(ENUM))
    IF RISK = 1 THEN
      ENEMYEXIST(ENUM) = 0
      CALL EXPLODE(ENEMYNEWPOSX(ENUM), ENEMYNEWPOSY(ENUM))
      CALL CATALOGDEBRIS(ENEMYNEWPOSX(ENUM), ENEMYNEWPOSY(ENUM))
      SCORE& = SCORE& + 1000            ' Enemy ship destroyed bonus
    ELSE
      IF NEEDCHGDIR(ENEMYOLDPOSX(ENUM), ENEMYOLDPOSY(ENUM), ENEMYDIR(ENUM)) = 1 THEN
        SELECT CASE ENEMYDIR(ENUM)
          CASE 8
            ENEMYDIR(ENUM) = 6
          CASE 6
            ENEMYDIR(ENUM) = 4
          CASE 4
            ENEMYDIR(ENUM) = 2
          CASE 2
            ENEMYDIR(ENUM) = 8
        END SELECT
      END IF
      SELECT CASE ENEMYDIR(ENUM)
        CASE 8                                  ' Up
          ENEMYNEWPOSY(ENUM) = ENEMYOLDPOSY(ENUM) - 1
        CASE 4                                  ' Left
          ENEMYNEWPOSX(ENUM) = ENEMYOLDPOSX(ENUM) - 1
        CASE 6                                  ' Right
          ENEMYNEWPOSX(ENUM) = ENEMYOLDPOSX(ENUM) + 1
        CASE 2                                  ' Down
          ENEMYNEWPOSY(ENUM) = ENEMYOLDPOSY(ENUM) + 1
      END SELECT
      CALL ERASESHIP(ENEMYOLDPOSX(ENUM), ENEMYOLDPOSY(ENUM))
      CALL MOVENEMYSHIPDIR(ENUM)
      ENEMYOLDPOSX(ENUM) = ENEMYNEWPOSX(ENUM)
      ENEMYOLDPOSY(ENUM) = ENEMYNEWPOSY(ENUM)
      IF NEEDFIRE(ENEMYNEWPOSX(ENUM), ENEMYNEWPOSY(ENUM)) = 1 THEN
        IF INDICTORPEDO(ENUM) = INACTIVE THEN
          INDICTORPEDO(ENUM) = FIRE              ' Fire torpedo
          TORPEDOSTATUS(QMDIR, ENUM) = ENEMYDIR(ENUM)
        END IF
      END IF
    END IF
  END IF
NEXT ENUM

END SUB

SUB UPDATETORPEDOES

FOR TNUM = 0 TO 4
  IF INDICTORPEDO(TNUM) = FIRE THEN
    IF TNUM = 0 THEN
      SELECT CASE DIR
        CASE 8
          TORPEDOSTATUS(QMX, 0) = NEWPOSX
          TORPEDOSTATUS(QMY, 0) = NEWPOSY - 20
        CASE 6
          TORPEDOSTATUS(QMX, 0) = NEWPOSX + 20
          TORPEDOSTATUS(QMY, 0) = NEWPOSY
        CASE 4
          TORPEDOSTATUS(QMX, 0) = NEWPOSX - 20
          TORPEDOSTATUS(QMY, 0) = NEWPOSY
        CASE 2
          TORPEDOSTATUS(QMX, 0) = NEWPOSX
          TORPEDOSTATUS(QMY, 0) = NEWPOSY + 20
      END SELECT
      TORPEDOSTATUS(QMDIR, 0) = DIR
    ELSE                   ' Else clause if TNUM = 0
      SELECT CASE ENEMYDIR(TNUM)
        CASE 8
          TORPEDOSTATUS(QMX, TNUM) = ENEMYNEWPOSX(TNUM)
          TORPEDOSTATUS(QMY, TNUM) = ENEMYNEWPOSY(TNUM) - 20
        CASE 6
          TORPEDOSTATUS(QMX, TNUM) = ENEMYNEWPOSX(TNUM) + 20
          TORPEDOSTATUS(QMY, TNUM) = ENEMYNEWPOSY(TNUM)
        CASE 4
          TORPEDOSTATUS(QMX, TNUM) = ENEMYNEWPOSX(TNUM) - 20
          TORPEDOSTATUS(QMY, TNUM) = ENEMYNEWPOSY(TNUM)
        CASE 2
          TORPEDOSTATUS(QMX, TNUM) = ENEMYNEWPOSX(TNUM)
          TORPEDOSTATUS(QMY, TNUM) = ENEMYNEWPOSY(TNUM) + 20
      END SELECT
    END IF                 ' If TNUM = 0
    INDICTORPEDO(TNUM) = PROGRESS      ' Send torpedo on its way
  ELSE                     ' Else clause if INDICTORPEDO = FIRE
    IF INDICTORPEDO(TNUM) = PROGRESS THEN
      CALL ERASESHIP(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM))
      SELECT CASE TORPEDOSTATUS(QMDIR, TNUM)
        CASE 8
          TORPEDOSTATUS(QMY, TNUM) = TORPEDOSTATUS(QMY, TNUM) - 10
        CASE 6
          TORPEDOSTATUS(QMX, TNUM) = TORPEDOSTATUS(QMX, TNUM) + 10
        CASE 4
          TORPEDOSTATUS(QMX, TNUM) = TORPEDOSTATUS(QMX, TNUM) - 10
        CASE 2
          TORPEDOSTATUS(QMY, TNUM) = TORPEDOSTATUS(QMY, TNUM) + 10
      END SELECT
      CALL DRAWTORPEDO(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM))
      SCORE& = SCORE& + 2
      IF (TORPEDOSTATUS(QMX, TNUM) < 10) OR (TORPEDOSTATUS(QMX, TNUM) > 630) THEN
        INDICTORPEDO(TNUM) = INACTIVE
        CALL ERASESHIP(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM))
      END IF                  ' IF level 3
      IF (TORPEDOSTATUS(QMY, TNUM) < 10) OR (TORPEDOSTATUS(QMY, TNUM) > 470) THEN
        INDICTORPEDO(TNUM) = INACTIVE
        CALL ERASESHIP(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM))
      END IF
      IF CRASH(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM)) = 1 THEN
        CALL ERASESHIP(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM))
        SELECT CASE TORPEDOSTATUS(QMDIR, TNUM)
          CASE 8
            TORPEDOSTATUS(QMY, TNUM) = TORPEDOSTATUS(QMY, TNUM) - 10
          CASE 6
            TORPEDOSTATUS(QMX, TNUM) = TORPEDOSTATUS(QMX, TNUM) + 10
          CASE 4
            TORPEDOSTATUS(QMX, TNUM) = TORPEDOSTATUS(QMX, TNUM) - 10
          CASE 2
            TORPEDOSTATUS(QMY, TNUM) = TORPEDOSTATUS(QMY, TNUM) + 10
        END SELECT
        CALL EXPLODE(TORPEDOSTATUS(QMX, TNUM), TORPEDOSTATUS(QMY, TNUM))
        INDICTORPEDO(TNUM) = INACTIVE
      END IF                  ' If CRASH = 1
    END IF                    ' If INDICTORPEDO = PROGRESS
  END IF                      ' If INDICTORPEDO = FIRE
NEXT TNUM

END SUB

